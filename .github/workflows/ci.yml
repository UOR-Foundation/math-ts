name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Check git workspace is clean
  check-clean-workspace:
    name: Clean Workspace Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for uncommitted changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Error: Working directory is not clean"
            git status --porcelain
            exit 1
          fi

  # Format check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run format check
        run: npm run format:check

      - name: Check git status
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Error: Code formatting issues found"
            git status --porcelain
            exit 1
          fi

  # Lint check
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # TypeScript check
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npm run typecheck

  # Build check
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [format, lint, typecheck]
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Check build artifacts
        run: |
          # Ensure all packages have dist directories
          for package in packages/*/; do
            if [ -d "$package" ] && [ -f "$package/package.json" ]; then
              if [ ! -d "$package/dist" ]; then
                echo "Error: No dist directory found in $package"
                exit 1
              fi
            fi
          done

  # Test suite
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration test
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Run integration tests
        run: npm run test:integration

  # Final clean workspace check
  final-check:
    name: Final Clean Check
    runs-on: ubuntu-latest
    needs: [build, test, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full build
        run: npm run build

      - name: Run all tests
        run: npm test

      - name: Check final workspace
        run: |
          # Ignore generated files
          git status --porcelain | grep -v "dist/" | grep -v "coverage/" | grep -v ".tsbuildinfo" > /tmp/status.txt
          if [ -s /tmp/status.txt ]; then
            echo "Error: Unexpected files in workspace"
            cat /tmp/status.txt
            exit 1
          fi

  # All checks passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [check-clean-workspace, format, lint, typecheck, build, test, integration, final-check]
    steps:
      - name: Success
        run: echo "All CI checks passed successfully!"
